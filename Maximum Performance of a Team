class Solution {
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        int[][] eng = new int[n][2];
        for (int i = 0; i < n; i++) {
            eng[i][0] = speed[i];
            eng[i][1] = efficiency[i];
        }
        Arrays.sort(eng, (a, b) -> b[1] - a[1]);
        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> a - b);
        long sum = 0;
        long per = 0;
        for (int[] engi : eng) {
            int curr = engi[0];
            int eff = engi[1];
            sum += curr;
            minHeap.add(curr);
            per = Math.max(per, sum * eff);
            if (minHeap.size() == k) {
                sum -= minHeap.poll();
            }
        }
        return (int)(per%1000000007);
    }
}
